<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>藤原豆腐店</title>
  
  <subtitle>碧蓝航线</subtitle>
  <link href="http://ysqq4.github.io/atom.xml" rel="self"/>
  
  <link href="http://ysqq4.github.io/"/>
  <updated>2024-02-12T15:46:11.813Z</updated>
  <id>http://ysqq4.github.io/</id>
  
  <author>
    <name>乔木</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客搭建(持续更新ing)</title>
    <link href="http://ysqq4.github.io/2023/11/29/bkdj/"/>
    <id>http://ysqq4.github.io/2023/11/29/bkdj/</id>
    <published>2023-11-29T08:16:44.000Z</published>
    <updated>2024-02-12T15:46:11.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客搭建-持续更新ing"><a href="#博客搭建-持续更新ing" class="headerlink" title="博客搭建(持续更新ing)"></a>博客搭建(持续更新ing)</h1><h2 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h2><h3 id="1-下载Git和Node-js"><a href="#1-下载Git和Node-js" class="headerlink" title="1.下载Git和Node.js"></a>1.下载Git和Node.js</h3><h4 id="1-1-Node-js的安装与配置"><a href="#1-1-Node-js的安装与配置" class="headerlink" title="1.1.Node.js的安装与配置"></a>1.1.Node.js的安装与配置</h4><p>​        首先去Node.js<a href="https://nodejs.org/en">官网</a> 下载node.js的安装程序，根据电脑系统的配置信息，下载对应的安装程序，然后开始下面的步骤。</p><p>​        下载好与电脑系统对应的安装程序后，开始安装流程:</p><h5 id="1-1-1-打开下载好的Node-js安装程序，点击Next-进行下一步的安装；"><a href="#1-1-1-打开下载好的Node-js安装程序，点击Next-进行下一步的安装；" class="headerlink" title="1.1.1.打开下载好的Node.js安装程序，点击Next,进行下一步的安装；"></a>1.1.1.打开下载好的Node.js安装程序，点击Next,进行下一步的安装；</h5><p>[图片]</p><h5 id="1-1-2-将”I-accept-the-terms-in-the-License-Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；"><a href="#1-1-2-将”I-accept-the-terms-in-the-License-Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；" class="headerlink" title="1.1.2.将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；"></a>1.1.2.将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；</h5><p>[图片]</p><h5 id="1-1-3-选择Node-js安装程序的安装位置，在这里以’C-Program-Files-nodejs’为例，点击Next，进入下一步操作；"><a href="#1-1-3-选择Node-js安装程序的安装位置，在这里以’C-Program-Files-nodejs’为例，点击Next，进入下一步操作；" class="headerlink" title="1.1.3.选择Node.js安装程序的安装位置，在这里以’C:\Program Files\nodejs’为例，点击Next，进入下一步操作；"></a>1.1.3.选择Node.js安装程序的安装位置，在这里以’C:\Program Files\nodejs’为例，点击Next，进入下一步操作；</h5><p>[图片]</p><h5 id="1-1-4-选择安装的模块和功能，这里全部安装，并添加到系统环境变量，继续点击Next，进入下一步操作；"><a href="#1-1-4-选择安装的模块和功能，这里全部安装，并添加到系统环境变量，继续点击Next，进入下一步操作；" class="headerlink" title="1.1.4.选择安装的模块和功能，这里全部安装，并添加到系统环境变量，继续点击Next，进入下一步操作；"></a>1.1.4.选择安装的模块和功能，这里全部安装，并添加到系统环境变量，继续点击Next，进入下一步操作；</h5><p>[图片]</p><h5 id="1-1-5-这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C-x2F-C-等，点击Next，进入下一步；"><a href="#1-1-5-这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C-x2F-C-等，点击Next，进入下一步；" class="headerlink" title="1.1.5.这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C&#x2F;C++等，点击Next，进入下一步；"></a>1.1.5.这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C&#x2F;C++等，点击Next，进入下一步；</h5><p>[图片]</p><h5 id="1-1-6-点击”install”，等待Node-js安装完成；"><a href="#1-1-6-点击”install”，等待Node-js安装完成；" class="headerlink" title="1.1.6.点击”install”，等待Node.js安装完成；"></a>1.1.6.点击”install”，等待Node.js安装完成；</h5><p>[图片]</p><h5 id="1-1-7-当看到下图所显示的情况，Node-js就安装完毕；"><a href="#1-1-7-当看到下图所显示的情况，Node-js就安装完毕；" class="headerlink" title="1.1.7.当看到下图所显示的情况，Node.js就安装完毕；"></a>1.1.7.当看到下图所显示的情况，Node.js就安装完毕；</h5><p>[图片]</p><h5 id="1-1-8-验证安装，并测试Node-js是否加入环境变量，当出现如下图的情况，Node-js安装大功告成；"><a href="#1-1-8-验证安装，并测试Node-js是否加入环境变量，当出现如下图的情况，Node-js安装大功告成；" class="headerlink" title="1.1.8.验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成；"></a>1.1.8.验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成；</h5><p>[图片]</p><p>​        如果执行node -v报错的话，那么手动将Node.js的安装路径添加到环境变量中，右键点击我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，在系统变量下找到名为path的变量名，如下图：</p><p>[图片]</p><p>​        选中path，或者双击，然后将你node.js的安装路径放在path变量值的最后面，如果添加之前path值最后有英文的分号，则直接将路径添加进去即可，如果没有，先添加英文的分号，然后点击保存，回到桌面，打开cmd(Win+R)，执行node -v，看是否成功。</p><h5 id="1-1-9-设置npm的镜像源："><a href="#1-1-9-设置npm的镜像源：" class="headerlink" title="1.1.9.设置npm的镜像源："></a>1.1.9.设置npm的镜像源：</h5><h5 id="1-1-10-设置npm的内置路径—-gt-全局模块路径和缓存路径-可选"><a href="#1-1-10-设置npm的内置路径—-gt-全局模块路径和缓存路径-可选" class="headerlink" title="1.1.10.设置npm的内置路径—&gt;全局模块路径和缓存路径(可选)"></a>1.1.10.设置npm的内置路径—&gt;全局模块路径和缓存路径(可选)</h5><pre class="language-bash"><code class="language-bash">npm包全局目录：C:/Users/[username]/AppData/Roaming/npm/node_modulesnpm包全局命令目录：C:/Users/[username]/AppData/Roaming/npmnpm实际去找全局命令的目录：C:/Users/[username]/.npmrc 文件内容的prefix值npm包全局cache目录：C:/Users/[username]/.npmrc 文件内容的cache值</code></pre><p>​        首先在你Node.js的安装位置，新建两个文件夹，node_global和node_cache，我的路径是：</p><pre class="language-bash"><code class="language-bash">C:\Program Files\nodejs\node_globalC:\Program Files\nodejs\node_cache</code></pre><p>然后分别执行的命令就是：</p><pre class="language-bash"><code class="language-bash">npm config set prefix"C:\Program Files\nodejs\node_global"npm config set cache "C:\Program Files\nodejs\node_cache"</code></pre><p>​        然后在配置环境变量，右击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到path变量进行修改，修改值如下图：</p><p>[图片]</p><p>[图片]</p><p>然后就大功告成了，Node.js就安装完毕了，下面开始Git安装。</p><h4 id="1-2-Git的安装与配置"><a href="#1-2-Git的安装与配置" class="headerlink" title="1.2.Git的安装与配置"></a>1.2.Git的安装与配置</h4><p>​        首先去Git<a href="https://git-scm.com/">官网</a>下载Git，根据你电脑系统的配置系统，下载对应的安装程序，然后开始进行下面的步骤：</p><p>[图片]</p><h5 id="1-2-1-下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next；"><a href="#1-2-1-下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next；" class="headerlink" title="1.2.1.下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next；"></a>1.2.1.下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next；</h5><p>[图片]</p><h5 id="1-2-2-选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步；"><a href="#1-2-2-选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步；" class="headerlink" title="1.2.2.选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步；"></a>1.2.2.选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步；</h5><p>[图片]</p><h5 id="1-2-3-选择你是否创建桌面快捷方式，其他默认即可，点击Next，进入下一步；"><a href="#1-2-3-选择你是否创建桌面快捷方式，其他默认即可，点击Next，进入下一步；" class="headerlink" title="1.2.3.选择你是否创建桌面快捷方式，其他默认即可，点击Next，进入下一步；"></a>1.2.3.选择你是否创建桌面快捷方式，其他默认即可，点击Next，进入下一步；</h5><p>[图片]</p><h5 id="1-2-4-是否将Git快捷方式的目录加入开始菜单栏，勾选后，开始菜单栏会出现关于Git应用的菜单快捷方式目录；"><a href="#1-2-4-是否将Git快捷方式的目录加入开始菜单栏，勾选后，开始菜单栏会出现关于Git应用的菜单快捷方式目录；" class="headerlink" title="1.2.4.是否将Git快捷方式的目录加入开始菜单栏，勾选后，开始菜单栏会出现关于Git应用的菜单快捷方式目录；"></a>1.2.4.是否将Git快捷方式的目录加入开始菜单栏，勾选后，开始菜单栏会出现关于Git应用的菜单快捷方式目录；</h5><p>[图片]</p><h5 id="1-2-5-这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程；"><a href="#1-2-5-这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程；" class="headerlink" title="1.2.5.这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程；"></a>1.2.5.这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程；</h5><p>[图片]</p><h5 id="1-2-6-选择安装Git时对环境变量PATH的影响，第一种影响小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要更改，直接点击”Next”继续安装；"><a href="#1-2-6-选择安装Git时对环境变量PATH的影响，第一种影响小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要更改，直接点击”Next”继续安装；" class="headerlink" title="1.2.6.选择安装Git时对环境变量PATH的影响，第一种影响小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要更改，直接点击”Next”继续安装；"></a>1.2.6.选择安装Git时对环境变量PATH的影响，第一种影响小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要更改，直接点击”Next”继续安装；</h5><p>[图片]</p><h5 id="1-2-7-选择Git在使用HTTPS时使用的库，若无特殊需求，可保持默认选项，点击”Next”继续安装；"><a href="#1-2-7-选择Git在使用HTTPS时使用的库，若无特殊需求，可保持默认选项，点击”Next”继续安装；" class="headerlink" title="1.2.7.选择Git在使用HTTPS时使用的库，若无特殊需求，可保持默认选项，点击”Next”继续安装；"></a>1.2.7.选择Git在使用HTTPS时使用的库，若无特殊需求，可保持默认选项，点击”Next”继续安装；</h5><p>[图片]</p><h5 id="1-2-8-选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击”Next”继续安装；"><a href="#1-2-8-选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击”Next”继续安装；" class="headerlink" title="1.2.8.选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击”Next”继续安装；"></a>1.2.8.选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击”Next”继续安装；</h5><p>[图片]</p><h5 id="1-2-9-选择模拟终端软件-即命令行窗口软件-，若无特殊需要，可默认选择，点击”Next”继续安装；"><a href="#1-2-9-选择模拟终端软件-即命令行窗口软件-，若无特殊需要，可默认选择，点击”Next”继续安装；" class="headerlink" title="1.2.9.选择模拟终端软件(即命令行窗口软件)，若无特殊需要，可默认选择，点击”Next”继续安装；"></a>1.2.9.选择模拟终端软件(即命令行窗口软件)，若无特殊需要，可默认选择，点击”Next”继续安装；</h5><p>[图片]</p><h5 id="1-2-10-最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击”install”即可完成安装；"><a href="#1-2-10-最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击”install”即可完成安装；" class="headerlink" title="1.2.10.最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击”install”即可完成安装；"></a>1.2.10.最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击”install”即可完成安装；</h5><p>[图片]</p><h5 id="1-2-11-安装完成"><a href="#1-2-11-安装完成" class="headerlink" title="1.2.11.安装完成"></a>1.2.11.安装完成</h5><p>[图片]</p><h5 id="1-2-12-回到桌面，点击鼠标右键，会出现两个选项Git-GUI-Here和Git-Bash-Here，在打开cmd-Win-R-，分别输入git和git-version，如果出现如下图的情况，即安装成功；"><a href="#1-2-12-回到桌面，点击鼠标右键，会出现两个选项Git-GUI-Here和Git-Bash-Here，在打开cmd-Win-R-，分别输入git和git-version，如果出现如下图的情况，即安装成功；" class="headerlink" title="1.2.12.回到桌面，点击鼠标右键，会出现两个选项Git GUI Here和Git Bash Here，在打开cmd(Win+R)，分别输入git和git -version，如果出现如下图的情况，即安装成功；"></a>1.2.12.回到桌面，点击鼠标右键，会出现两个选项Git GUI Here和Git Bash Here，在打开cmd(Win+R)，分别输入git和git -version，如果出现如下图的情况，即安装成功；</h5><p>[图片]</p><p>[图片]</p><h4 id="1-3-修改配置文件要用到的软件"><a href="#1-3-修改配置文件要用到的软件" class="headerlink" title="1.3.修改配置文件要用到的软件:"></a>1.3.修改配置文件要用到的软件:</h4><p>Visual Studio Code <a href="https://visualstudio.microsoft.com/zh-hans/">官网下载</a></p><h2 id="二、Github注册及Github-Page创建"><a href="#二、Github注册及Github-Page创建" class="headerlink" title="二、Github注册及Github Page创建"></a>二、Github注册及Github Page创建</h2><h3 id="打开Github官网"><a href="#打开Github官网" class="headerlink" title="打开Github官网"></a>打开Github<a href="https://github.com/">官网</a></h3><p>​        点击右上角的Sign Up，然后在出现的页面上填写你的相关信息，进行注册：</p><p>[图片]</p><p>[图片]</p><p>[图片]</p><p>​        验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击Continue继续：</p><p>[图片]</p><p>​        这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库：</p><p>[图片]</p><p>​        验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：&lt;用户名&gt;.github.io，Description为描述仓库，自定义写，填写必写的描述，也可不填。勾选Initialize this repository with a README点击Creat repository进行创建。</p><p>[图片]</p><p>​        然后就会出现如图所示的界面，即仓库创建成功。</p><p>[图片]</p><p>​        我们来测试一下，点击Create new file，出现如下界面，然后命名为index.html，在填写如图的内容，再点击Commit new file，即创建成功，然后打开一个新的网页，输入网址https:&#x2F;&#x2F;&lt;你的用户名&gt;.github.io，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p>[图片]</p><p>[图片]</p><p>[图片]</p><p>​        至此，Github的注册以及Github Pages已经创建完成了。</p><h2 id="三、配置Git用户名和邮箱"><a href="#三、配置Git用户名和邮箱" class="headerlink" title="三、配置Git用户名和邮箱"></a>三、配置Git用户名和邮箱</h2><p>​        在桌面点击鼠标右键(或者在博客目录下)，点击Git Bash Here，会出现一个界面如下图所示：</p><p>[图片]</p><p>​        然后分别输入下面的两个命令，并回车：</p><pre class="language-bash"><code class="language-bash">git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"# 一般只要不报错，可以跳过下面寻找.gitconfig文件</code></pre><p>​        然后找到.gitconfig文件，文件存放位置在C:&#x2F;Users&#x2F;[username]&#x2F;.gitconfig(未找到的话，请开启显示隐藏文件的功能)，用编辑器打开，看到如下图所示的内容，即配置成功！</p><p>[图片]</p><h2 id="四、本地安装以及发布"><a href="#四、本地安装以及发布" class="headerlink" title="四、本地安装以及发布"></a>四、本地安装以及发布</h2><h3 id="1-安装到本地"><a href="#1-安装到本地" class="headerlink" title="1.安装到本地"></a>1.安装到本地</h3><p>​        首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtext的文件夹，创建完后，先不点进去，在此处点击鼠标右键，选择Git Bash Here，然后依次输入如下命令：</p><pre class="language-bash"><code class="language-bash"># hexo框架的安装npm install -g hexo-cli# 等上一个命令完成后，在输入下面的命令hexo init <新建文件夹的名称>  #初始化文件夹cd <新建文件夹的名称>npm install  # 安装博客所需要的依赖文件</code></pre><p>[图片]</p><p>[图片]</p><p>​        等待运行完成，此时文件夹中多了许多文件。</p><p>​        注意：后续的命令均需要在站点目录下(即文件夹内)使用Git Bash运行。</p><p>​        此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令：</p><pre class="language-bash"><code class="language-bash"># 注意空格hexo ghexo s</code></pre><p>[图片]</p><p>​        浏览器中打开<a href="http://localhost:4000/">http://localhost:4000/</a> ，可以看到一个网页，说明Hexo博客已经成功在本地运行。</p><h3 id="2-本地博客发布到Github-Pages"><a href="#2-本地博客发布到Github-Pages" class="headerlink" title="2.本地博客发布到Github Pages"></a>2.本地博客发布到Github Pages</h3><h2 id="五、hexo博客主题安装与修改"><a href="#五、hexo博客主题安装与修改" class="headerlink" title="五、hexo博客主题安装与修改"></a>五、hexo博客主题安装与修改</h2><h3 id="1-主题下载与安装"><a href="#1-主题下载与安装" class="headerlink" title="1. 主题下载与安装"></a>1. 主题下载与安装</h3><p>​        点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">网站</a> 下载 master 分支的最新稳定版的代码，解压缩后，将 hexo-theme-matery 的文件夹复制到你 Hexo 的 themes 文件夹中即可。</p><p>  当然你也可以在你的站点目录文件夹下使用 git clone 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本。</p><pre class="language-bash"><code class="language-bash">git clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><h3 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2. 主题配置"></a>2. 主题配置</h3><h4 id="2-1-切换主题"><a href="#2-1-切换主题" class="headerlink" title="2.1 切换主题"></a>2.1 切换主题</h4><p>  <strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件，站点配置文件就是根目录下的配置文件，比如我的博客文件在F:\blog下，那么站点配置文件就是F:\blog_config.yml，主题配置文件就是F:\blog\themes\matery_config.yml。</p><p>  另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p><p>  主题下载完成后，将站点配置文件中的theme值修改为你下载主题的文件名，此处为matery，那么值就修改为theme: matery。</p><p>  一些站点配置文件的其他地方的修改：</p><p>  语言选择：如果为中文用户，则在language:后添加值zh-CN，如果不修改，默认为英语；<br>  网址修改：url:的值为你的网址名，如<a href="http://xxxx.github.io,如果有域名,则修改为你的域名即可,至于有关域名的修改解析,后面我会说到,这里先不说了./">http://xxxx.github.io，如果有域名，则修改为你的域名即可，至于有关域名的修改解析，后面我会说到，这里先不说了。</a><br>  站点配置文件有个per_page属性，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。</p><h4 id="2-2-新建标签-tags-页面"><a href="#2-2-新建标签-tags-页面" class="headerlink" title="2.2 新建标签 tags 页面"></a>2.2 新建标签 tags 页面</h4><p>​        tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash"><code class="language-bash">    hexo new page "tags"    </code></pre><p>​        编辑你刚刚新建的页面文件 &#x2F;source&#x2F;tags&#x2F;index.md，至少需要以下内容：</p><pre class="language-bash"><code class="language-bash">---title: tagsdate: 2024-09-30 18:23:38type: "tags"layout: "tags"--- </code></pre><h4 id="2-3-新建分类-categories-页面"><a href="#2-3-新建分类-categories-页面" class="headerlink" title="2.3 新建分类 categories 页面"></a>2.3 新建分类 categories 页面</h4><p>  categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash"><code class="language-bash">hexo new page "categories" </code></pre><p>​        编辑你刚刚新建的页面文件 &#x2F;source&#x2F;categories&#x2F;index.md，至少需要以下内容：</p><pre class="language-bash"><code class="language-bash">---title: categoriesdate: 2024-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h4 id="2-4-新建关于我-about-页面"><a href="#2-4-新建关于我-about-页面" class="headerlink" title="2.4 新建关于我 about 页面"></a>2.4 新建关于我 about 页面</h4><p>  about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash"><code class="language-bash">    hexo new page "about"</code></pre><p>​        编辑你刚刚新建的页面文件 &#x2F;source&#x2F;about&#x2F;index.md，至少需要以下内容：</p><pre class="language-bash"><code class="language-bash">---title: aboutdate: 2024-09-30 17:25:30type: "about"layout: "about"---</code></pre><h4 id="2-5-新建留言板-contact-页面-可选"><a href="#2-5-新建留言板-contact-页面-可选" class="headerlink" title="2.5 新建留言板 contact 页面 (可选)"></a>2.5 新建留言板 contact 页面 (可选)</h4><p>  contact 页是用来展示留言板信息的页面，如果在你的博客 source 目录下还没有 contact&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash"><code class="language-bash">hexo new page "contact"</code></pre><p>  编辑你刚刚新建的页面文件 &#x2F;source&#x2F;contact&#x2F;index.md，至少需要以下内容：</p><pre class="language-bash"><code class="language-bash">---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><p>  <strong>注意：</strong>本留言板功能依赖于第三方评论系统，请激活你的评论系统才有效果。并且在主题的 _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释即可。</p><h4 id="2-6-新建友情链接-friends-页面-可选"><a href="#2-6-新建友情链接-friends-页面-可选" class="headerlink" title="2.6 新建友情链接 friends 页面 (可选)"></a>2.6 新建友情链接 friends 页面 (可选)</h4><p>​        friends 页是用来展示友情链接信息的页面，如果在你的博客 source 目录下还没有 friends&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><pre class="language-bash"><code class="language-bash">hexo new page "friends"</code></pre><p>  编辑你刚刚新建的页面文件 &#x2F;source&#x2F;friends&#x2F;index.md，至少需要以下内容：</p><pre class="language-bash"><code class="language-bash">---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>  同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class="language-bash"><code class="language-bash">  [&#123;    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"&#125;, &#123;    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"&#125;, &#123;    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"&#125;]</code></pre><h4 id="2-7-菜单导航配置"><a href="#2-7-菜单导航配置" class="headerlink" title="2.7 菜单导航配置"></a>2.7 菜单导航配置</h4><h5 id="2-7-1-配置基本菜单导航的名称、路径url和图标icon"><a href="#2-7-1-配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="2.7.1 配置基本菜单导航的名称、路径url和图标icon."></a>2.7.1 配置基本菜单导航的名称、路径url和图标icon.</h5><p>1.菜单导航名称可以是中文也可以是英文(如：Index或主页)<br>2.图标icon 可以在Font Awesome 中查找</p><pre class="language-bash"><code class="language-bash">      menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h5 id="2-7-2-二级菜单配置方法"><a href="#2-7-2-二级菜单配置方法" class="headerlink" title="2.7.2. 二级菜单配置方法"></a>2.7.2. 二级菜单配置方法</h5><p>  如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><p>1.在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)<br>2.在children下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 -.<br>4.注意缩进格式</p><pre class="language-bash"><code class="language-bash">      menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><h4 id="2-8-添加emoji表情支持（可选的）"><a href="#2-8-添加emoji表情支持（可选的）" class="headerlink" title="2.8 添加emoji表情支持（可选的）"></a>2.8 添加emoji表情支持（可选的）</h4><p>  本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下：</p><pre class="language-bash"><code class="language-bash">npm install hexo-filter-github-emojis --save</code></pre><p>  在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="language-bash"><code class="language-bash">  githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>  执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。</p><h4 id="2-9-代码高亮"><a href="#2-9-代码高亮" class="headerlink" title="2.9 代码高亮"></a>2.9 代码高亮</h4><p>  由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="language-bash"><code class="language-bash">npm i -S hexo-prism-plugin</code></pre><p>  然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class="language-bash"><code class="language-bash">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="2-10-搜索"><a href="#2-10-搜索" class="headerlink" title="2.10 搜索"></a>2.10 搜索</h4><p>  本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="language-bash"><code class="language-bash">npm install hexo-generator-search --save</code></pre><p>  在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h4 id="2-11-中文链接转拼音（可选的）"><a href="#2-11-中文链接转拼音（可选的）" class="headerlink" title="2.11 中文链接转拼音（可选的）"></a>2.11 中文链接转拼音（可选的）</h4><p>  如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用   hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>  安装命令如下：</p><pre class="language-bash"><code class="language-bash">npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="language-bash"><code class="language-bash">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><p><strong>注：</strong>除了此插件外，hexo-abbrlink 插件也可以生成非中文的链接。</p><h4 id="2-12-文章字数统计插件（可选的）"><a href="#2-12-文章字数统计插件（可选的）" class="headerlink" title="2.12 文章字数统计插件（可选的）"></a>2.12 文章字数统计插件（可选的）</h4><p>  如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。</p><p>  安装命令如下：</p><pre class="language-bash"><code class="language-bash">npm i --save hexo-wordcount</code></pre><p>  然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><pre class="language-bash"><code class="language-bash">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h4 id="2-13-添加-RSS-订阅支持（可选的）"><a href="#2-13-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.13 添加 RSS 订阅支持（可选的）"></a>2.13 添加 RSS 订阅支持（可选的）</h4><p>  本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：</p><pre class="language-bash"><code class="language-bash">npm install hexo-generator-feed --save</code></pre><p>  在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="language-bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>  执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。</p><h4 id="2-14-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-14-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.14 添加 DaoVoice 在线聊天功能（可选的）"></a>2.14 添加 DaoVoice 在线聊天功能（可选的）</h4><p>  前往 <a href="https://www.daocloud.io/">DaoVoice</a>官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中</p><h4 id="2-15-添加-Tidio-在线聊天功能（可选的）"><a href="#2-15-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.15 添加 Tidio 在线聊天功能（可选的）"></a>2.15 添加 Tidio 在线聊天功能（可选的）</h4><p>  前往 <a href="https://www.tidio.com/">Tidio</a>官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。</p><h4 id="2-16-修改页脚"><a href="#2-16-修改页脚" class="headerlink" title="2.16 修改页脚"></a>2.16 修改页脚</h4><p>  页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 &#x2F;layout&#x2F;_partial&#x2F;footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h4 id="2-17-修改社交链接"><a href="#2-17-修改社交链接" class="headerlink" title="2.17 修改社交链接"></a>2.17 修改社交链接</h4><p>  在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 &#x2F;layout&#x2F;_partial&#x2F;social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="language-bash"><code class="language-bash">    <xmp>    <% if (theme.socialLink.github) &#123; %>    <a href="<%= theme.socialLink.github %>" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50">        <i class="fab fa-github"></i>    </a><% &#125; %>    </xmp></code></pre><p>  其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考：</p><p>Facebook: fab fa-facebook<br>Twitter: fab fa-twitter<br>Google-plus: fab fa-google-plus<br>Linkedin: fab fa-linkedin<br>Tumblr: fab fa-tumblr<br>Medium: fab fa-medium<br>Slack: fab fa-slack<br>Sina Weibo: fab fa-weibo<br>Wechat: fab fa-weixin<br>QQ: fab fa-qq<br>Zhihu: fab fa-zhihu<br>  <strong>注意:</strong> 本主题中使用的 Font Awesome 版本为 5.11.0。</p><h4 id="2-18-修改打赏的二维码图片"><a href="#2-18-修改打赏的二维码图片" class="headerlink" title="2.18 修改打赏的二维码图片"></a>2.18 修改打赏的二维码图片</h4><p>  在主题文件的 source&#x2F;medias&#x2F;reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="2-19-配置音乐播放器（可选的）"><a href="#2-19-配置音乐播放器（可选的）" class="headerlink" title="2.19 配置音乐播放器（可选的）"></a>2.19 配置音乐播放器（可选的）</h4><p>  要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>  首先，在你的博客 source 目录下的 _data 目录（没有的话就新建一个）中新建 musics.json 文件，文件内容如下所示：</p><pre class="language-bash"><code class="language-bash">    [&#123;    "name": "五月雨变奏电音",    "artist": "AnimeVibe",    "url": "http://xxx.com/music1.mp3",    "cover": "http://xxx.com/music-cover1.png"&#125;, &#123;    "name": "Take me hand",    "artist": "DAISHI DANCE,Cecile Corbel",    "url": "/medias/music/music2.mp3",    "cover": "/medias/music/cover2.png"&#125;, &#123;    "name": "Shape of You",    "artist": "J.Fla",    "url": "http://xxx.com/music3.mp3",    "cover": "http://xxx.com/music-cover3.png"&#125;]</code></pre><p>  <strong>注：</strong>以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p><p>  然后，在主题的 _config.yml 配置文件中激活配置即可：</p><pre class="language-bash"><code class="language-bash"># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: '#42b983'  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</code></pre><h3 id="3-文章-Front-matter-介绍"><a href="#3-文章-Front-matter-介绍" class="headerlink" title="3. 文章 Front-matter 介绍"></a>3. 文章 Front-matter 介绍</h3><p>  Front-matter 选项详解<br>  Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><p>  您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>  以下为文章的 Front-matter 示例。</p><p>  最简示例</p><pre class="language-bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p>  最全示例</p><pre class="language-bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: 2022-05-02 09:25:00author: CrazyYuimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h3 id="4-效果截图"><a href="#4-效果截图" class="headerlink" title="4. 效果截图"></a>4. 效果截图</h3><p>  最新版本进行了优化更新，效果图与最初的效果图有差别，下面的图不是最新版本的。、</p><p>[图片]</p><p>[图片]</p><p>[图片]</p><p>[图片]</p><p>[图片]</p><h2 id="六、hexo博客美化"><a href="#六、hexo博客美化" class="headerlink" title="六、hexo博客美化"></a>六、hexo博客美化</h2><h2 id="七、添加评论系统"><a href="#七、添加评论系统" class="headerlink" title="七、添加评论系统"></a>七、添加评论系统</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客搭建-持续更新ing&quot;&gt;&lt;a href=&quot;#博客搭建-持续更新ing&quot; class=&quot;headerlink&quot; title=&quot;博客搭建(持续更新ing)&quot;&gt;&lt;/a&gt;博客搭建(持续更新ing)&lt;/h1&gt;&lt;h2 id=&quot;一、博客环境搭建&quot;&gt;&lt;a href=&quot;#一、博</summary>
      
    
    
    
    <category term="博客搭建" scheme="http://ysqq4.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="博客" scheme="http://ysqq4.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>取消windows11推荐项目</title>
    <link href="http://ysqq4.github.io/2023/11/29/tjxm/"/>
    <id>http://ysqq4.github.io/2023/11/29/tjxm/</id>
    <published>2023-11-29T07:50:57.000Z</published>
    <updated>2023-11-29T08:01:11.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="取消电脑开始菜单推荐项"><a href="#取消电脑开始菜单推荐项" class="headerlink" title="取消电脑开始菜单推荐项"></a>取消电脑开始菜单推荐项</h1><ol><li>点击下面的开始菜单，选择“设置”。</li><li>点击个性化，选择“开始”选项。</li><li>关闭“显示最近添加的应用”。</li><li>关闭“显示最近添加的应用程序”。</li><li>打开开始菜单，“推荐项目”已经关闭。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;取消电脑开始菜单推荐项&quot;&gt;&lt;a href=&quot;#取消电脑开始菜单推荐项&quot; class=&quot;headerlink&quot; title=&quot;取消电脑开始菜单推荐项&quot;&gt;&lt;/a&gt;取消电脑开始菜单推荐项&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;点击下面的开始菜单，选择“设置”。&lt;/li&gt;
&lt;li&gt;点</summary>
      
    
    
    
    <category term="电脑设置" scheme="http://ysqq4.github.io/categories/%E7%94%B5%E8%84%91%E8%AE%BE%E7%BD%AE/"/>
    
    
    <category term="电脑" scheme="http://ysqq4.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>U盘自定义图标</title>
    <link href="http://ysqq4.github.io/2023/10/04/upanicon/"/>
    <id>http://ysqq4.github.io/2023/10/04/upanicon/</id>
    <published>2023-10-04T03:03:18.000Z</published>
    <updated>2024-02-12T13:44:07.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="U盘自定义图标"><a href="#U盘自定义图标" class="headerlink" title="U盘自定义图标"></a>U盘自定义图标</h1><pre class="language-bash">创建一个新文件夹命名为autorun.inf内容为<code class="language-bash">[autorun]ICON=favicon.ico,0</code></pre><ul><li>其中的favicon.ico图片需要自己去免费的网站去转化</li><li>百度icon图片转换，找免费的就行</li><li>接着把autorun.inf和favicon.ico图片放入U盘根目录</li><li>注意:一定是要放在根目录</li><li>接着右键点击其中一个属性-&gt;隐藏-&gt;确定</li><li>最后把U盘拔出重新插入就大功告成了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;U盘自定义图标&quot;&gt;&lt;a href=&quot;#U盘自定义图标&quot; class=&quot;headerlink&quot; title=&quot;U盘自定义图标&quot;&gt;&lt;/a&gt;U盘自定义图标&lt;/h1&gt;&lt;pre class=&quot;language-bash&quot;&gt;
创建一个新文件夹命名为autorun.inf
内容</summary>
      
    
    
    
    <category term="自定义" scheme="http://ysqq4.github.io/categories/%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
    <category term="U盘" scheme="http://ysqq4.github.io/tags/U%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>欢迎加入藤原豆腐店</title>
    <link href="http://ysqq4.github.io/2023/06/19/love/"/>
    <id>http://ysqq4.github.io/2023/06/19/love/</id>
    <published>2023-06-19T03:24:16.000Z</published>
    <updated>2024-02-12T13:42:47.652Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img2.imgtp.com/2024/02/12/wgXPLbPL.jpg"></p><h3 id="大家好"><a href="#大家好" class="headerlink" title="大家好"></a>大家好</h3><p>My name is<a href="https://qm.qq.com/q/iKy0HRVzOK">乔木</a>~<br>Welcome to <a href="http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&k=2Ot_eQK6Z4RNtGUxPwkltjHqBV82CfXf&authKey=3QJ8kKDCpsjobo8UOvwnuPYKdjql737AZIePwgBUKhMfU1panFFu4QoxFpSUNpFU&noverify=0&group_code=1080169276">Galgame攻略交流</a>!</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img2.imgtp.com/2024/02/12/wgXPLbPL.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;大家好&quot;&gt;&lt;a href=&quot;#大家好&quot; class=&quot;headerlink&quot; title=&quot;大家好&quot;&gt;&lt;/a&gt;大家好&lt;/h3&gt;&lt;p&gt;My name is&lt;a href=&quot;https://qm.qq.com/q/iKy0HRVzOK&quot;&gt;乔木&lt;/a&gt;~&lt;br&gt;Welcome to &lt;a href=&quot;http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;k=2Ot_eQK6Z4RNtGUxPwkltjHqBV82CfXf&amp;authKey=3QJ8kKDCpsjobo8UOvwnuPYKdjql737AZIePwgBUKhMfU1panFFu4QoxFpSUNpFU&amp;noverify=0&amp;group_code=1080169276&quot;&gt;Galgame攻略交流&lt;/a&gt;!&lt;/p&gt;</summary>
    
    
    
    
    <category term="QQ" scheme="http://ysqq4.github.io/tags/QQ/"/>
    
  </entry>
  
</feed>
